name: DownloadArtifactFromDataFactoryCICDPipeline-$(Date:yyyyMMdd)$(Rev:.r)

# How to use the RunID and download the artifact in the same job. To download the artifact in a different job, see the DifferentJobs.yaml file.

trigger: none # Manual trigger

pool:
  vmImage: "windows-latest"

parameters:
- name: PipelineID
  type: number
  default: 1 # Pipeline ID of the other pipeline you want to grab the artifact from.
- name: PipelineRunIDOptional
  type: number
  default: 0 # If 0, pipeline will automatically find the most recent pipeline RunID. Optionally, you can pass in a specific RunID the pipeline will use to grab the artifact from the other pipeline.

jobs:
- job: GetLatestSuccessfulRunIDAndDownloadArtifact 
  # Automatically gets the latest successful run ID of the other pipeline (PipelineID parameter) and will download the artifact.
  
  steps:
# If PipelineRunIDOptional is 0 (default value), then find the latest successful pipeline run ID from the other pipeline.
# Otherwise (else clause), use the PipelineRunIDOptional parameter and download the artifact from that specific run.
  - bash: |
      if [ ${{ parameters.PipelineRunIDOptional }} -eq 0 ]; then
        LatestSuccessfulRunID=$(az pipelines build list --definition-ids ${{ parameters.PipelineID }} --detect true --org "https://dev.azure.com/DataEngineeringWithNick" --project "AzurePipelineDataFactoryCICD" --result succeeded --status completed --top 1 --query "reverse(sort_by(@, &finishTime)) | [0].id")
        echo "The latest successful pipeline RunID is: $LatestSuccessfulRunID"
        echo "##vso[task.setvariable variable=RunID;]$LastestSuccessfulRunID"
      
      else
        echo "The predefined pipeline RunID is: ${{ parameters.PipelineRunIDOptional }}"
        echo "##vso[task.setvariable variable=RunID;]${{ parameters.PipelineRunIDOptional }}"
      
      fi  
      
    #   ${{ if eq(parameters.PipelineRunIDOptional, 0) }}:
    #     LatestSuccessfulRunID=$(az pipelines build list --definition-ids ${{ parameters.PipelineID }} --detect true --org "https://dev.azure.com/DataEngineeringWithNick" --project "AzurePipelineDataFactoryCICD" --result succeeded --status completed --top 1 --query "reverse(sort_by(@, &finishTime)) | [0].id")
    #     echo "The latest successful pipeline RunID is: $LatestSuccessfulRunID"
    #     echo "##vso[task.setvariable variable=RunID;]$LastestSuccessfulRunID"
 
    #   ${{ else }}:
    #     subscriptionId: "$(PRODSubscriptionID)"
    #     LatestSuccessfulRunID=$(az pipelines build list --definition-ids ${{ parameters.PipelineID }} --detect true --org "https://dev.azure.com/DataEngineeringWithNick" --project "AzurePipelineDataFactoryCICD" --result succeeded --status completed --top 1 --query "reverse(sort_by(@, &finishTime)) | [0].id")
    #     echo "The latest successful pipeline RunID is: $LatestSuccessfulRunID"
    #     echo "##vso[task.setvariable variable=RunID;]${{ parameters.PipelineRunIDOptional }}"
    # displayName: "Get Lastest Successful Pipeline RunID"
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    
  - task: DownloadPipelineArtifact@2
    displayName: "Download The ADF Artifact"
    inputs:
      buildType: "specific"
      project: "AzurePipelineDataFactoryCICD"
      pipeline: ${{ parameters.PipelineID }}
      runId: $(RunID) # Uses the variable created in the previous "Get Latest Successful Pipeline RunID" task above.
      artifactName: "ADFArtifact"
      targetpath: "$(Pipeline.Workspace)/MyPipelineFolder"
  
  - task: CmdLine@2
    displayName: "List Contents of the ADF Artifact"
    inputs:
      script: dir
      workingDirectory: "$(Pipeline.Workspace)/MyPipelineFolder" 

